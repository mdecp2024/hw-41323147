var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://mdecp2024.github.io/hw-41323147/ \n 個人網站: https://mdecp2024.github.io/hw-41323147/content/index.html \n \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython-1', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython-1.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '\n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '心得:自從上次的學習，這一次很開心能夠學會製作本週作業， 從本質思考，從根本解決問題，很高興能夠成功完成此作業。 以下影片說明如何製作作業: \n \n 1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n def draw_circle(radius):\n    # 設定區域的大小\n    size = 10\n    # 圓心座標 (5, 5) 是在 10x10 的區域的中心\n    center_x, center_y = 5, 5\n\n    # 遍歷整個 10x10 的區域\n    for y in range(size):\n        for x in range(size):\n            # 計算點 (x, y) 是否在圓內部\n            distance = (x - center_x) ** 2 + (y - center_y) ** 2\n            # 如果該點在圓內，則顯示 "*"\n            if distance <= radius ** 2:\n                print(\'*\', end=\'\')\n            else:\n                print(\' \', end=\'\')\n        print()  # 換行\n\n# 測試：使用半徑為 4 的圓\ndraw_circle(4)\n \n \n 第一題解答: 以 "*" 字元列印出圓型區域 \n \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 網頁上的方格與塗色 \n from browser import html\nfrom browser import document as doc\n\n# 建立畫布\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每格的像素數\ngs = 40  # 每格 40px，10x10 網格適合 400x400 畫布\n\n# 畫布的 context\nctx = canvas.getContext("2d")\n\n# 畫矩形的函數\ndef dRect(lux, luy, w, h, s=1, c=\'#ff0000\'):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n\n# 畫網格的函數\ndef grid(width, height, grid_pix):\n    # 繪製 10x10 的網格\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\n# 填充圓形的函數\ndef draw_circle(radius):\n    # 圓心設定在 5, 5（10x10 的中間）\n    center_x, center_y = 5, 5\n    # 計算圓形的範圍，網格大小是 gs，所以圓形的半徑要乘以 gs\n    radius_pixels = radius * gs\n\n    # 遍歷 10x10 的格子\n    for i in range(10):\n        for j in range(10):\n            # 計算格子的中心座標\n            x = i + 0.5\n            y = j + 0.5\n            # 計算該點到圓心的距離\n            distance = (x - center_x) ** 2 + (y - center_y) ** 2\n            # 如果該點在圓內，填充顏色\n            if distance <= radius ** 2:\n                fill(i * gs, j * gs, "black")\n\n# 填充顏色的函數\ndef fill(x, y, color):\n    ctx.fillStyle = color\n    ctx.fillRect(x + 1, y + 1, gs - 2, gs - 2)\n\n# 繪製網格\ngrid(10, 10, gs)\n\n# 在網格中畫出圓形，假設半徑為 4\ndraw_circle(4)\n \n \n 第二題解答: 利用黑色方塊圍出一個圓形區域 \n \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '題目一 \n n=11 #總共行數\nspace = \'_\'\ncenter = n//2\n#print(center)\n\nfor y in range(n):\n    for x in range(n):\n        print("(",x,",",y,")",sep="") \n \n \n 第一題 \n 程式1 \n 程式2 \n 第二題 \n 程式1 \n 程式2 \n 第三題 \n 程式1 \n 第四題 \n 程式1 \n 第五題 \n 程式1 \n 第六題 \n 程式1 \n 第七題 \n 程式1 \n 程式2 \n 程式3 \n 第八題 \n 程式1 \n 第九題 \n 程式1 \n 第十題 \n 程式1 \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': 'w13 作業: \n \n from browser import html\nfrom browser import document as doc\n\n# 建立 canvas\ncanvas = html.CANVAS(width=300, height=300)  # 畫布大小\nbrython_div = doc["brython_div1"]  # HTML 中的容器元素\nbrython_div <= canvas\n\nctx = canvas.getContext("2d")\nctx.lineWidth = 2  # 線條寬度設定\n\n# 第一個矩形的參數\nrect1_x, rect1_y = 50, 50  # 矩形左上角座標\nrect1_size = 100  # 矩形邊長\n\n# 第二個矩形的參數\nrect2_x, rect2_y = 100, 100  # 矩形左上角座標\nrect2_size = 100  # 矩形邊長\n\n# 填充第一個矩形的外接圓內部\ncenter_x1 = rect1_x + rect1_size / 2\ncenter_y1 = rect1_y + rect1_size / 2\nradius1 = (rect1_size * (2 ** 0.5)) / 2\nctx.fillStyle = "rgba(255, 255, 0, 0.5)"  # 半透明黃色\nctx.beginPath()\nctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)\nctx.fill()\n\n# 填充第二個矩形的外接圓內部\ncenter_x2 = rect2_x + rect2_size / 2\ncenter_y2 = rect2_y + rect2_size / 2\nradius2 = (rect2_size * (2 ** 0.5)) / 2\nctx.fillStyle = "rgba(128, 0, 128, 0.5)"  # 半透明紫色\nctx.beginPath()\nctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)\nctx.fill()\n\n# 填充第一個矩形內部\nctx.fillStyle = "lightblue"  # 填充顏色\nctx.beginPath()\nctx.rect(rect1_x, rect1_y, rect1_size, rect1_size)\nctx.fill()\n\n# 填充第二個矩形內部\nctx.fillStyle = "lightgreen"  # 填充顏色\nctx.beginPath()\nctx.rect(rect2_x, rect2_y, rect2_size, rect2_size)\nctx.fill()\n\n# 繪製第一個矩形的對角線\nctx.strokeStyle = \'blue\'  # 對角線顏色\nctx.beginPath()\nctx.moveTo(rect1_x, rect1_y)  # 左上角\nctx.lineTo(rect1_x + rect1_size, rect1_y + rect1_size)  # 右下角\nctx.stroke()\n\n# 繪製第一個矩形的邊框\nctx.strokeStyle = "red"  # 邊框顏色\nctx.beginPath()\nctx.rect(rect1_x, rect1_y, rect1_size, rect1_size)\nctx.stroke()\n\n# 繪製第二個矩形的邊框\nctx.beginPath()\nctx.rect(rect2_x, rect2_y, rect2_size, rect2_size)\nctx.stroke()\n\n# 繪製第一個矩形的外接圓邊框\nctx.strokeStyle = \'black\'  # 外接圓邊框顏色\nctx.beginPath()\nctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)\nctx.stroke()\n\n# 繪製第二個矩形的外接圓邊框\nctx.beginPath()\nctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)\nctx.stroke() \n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w13_ai', 'text': '\n', 'tags': '', 'url': 'w13_ai.html'}, {'title': 'w14_hw', 'text': 'from browser import html\nfrom browser import document as doc\nimport random\nimport math\n\n# 初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    doc[id] <= canvas\n    ctx = canvas.getContext("2d")\n    return canvas, ctx\n\n# 隨機顏色生成\ndef random_color_generator():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return f"rgb({r}, {g}, {b})"\n\n# 判斷點是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 繪製三個圓形的區域和背景\ndef draw_three_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):\n    canvas, ctx = initialize_canvas(400, 400)\n\n    # 顏色分配\n    color1 = random_color_generator()  # 圓1的獨立區域顏色\n    color2 = random_color_generator()  # 圓2的獨立區域顏色\n    color3 = random_color_generator()  # 圓3的獨立區域顏色\n    color_12 = random_color_generator()  # 圓1和圓2交集區域顏色\n    color_13 = random_color_generator()  # 圓1和圓3交集區域顏色\n    color_23 = random_color_generator()  # 圓2和圓3交集區域顏色\n    color_123 = random_color_generator()  # 三個圓交集區域顏色\n    color_background = "white"  # 背景顏色\n\n    # 清空畫布\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n    # 掃描畫布上的每個像素點\n    for py in range(0, canvas.height):\n        for px in range(0, canvas.width):\n            # 判斷像素是否屬於某個圓或交集區域\n            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)\n            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)\n            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n\n            if in_circle1 and in_circle2 and in_circle3:\n                # 同時在三個圓內\n                ctx.fillStyle = color_123\n            elif in_circle1 and in_circle2:\n                # 僅在圓1和圓2內\n                ctx.fillStyle = color_12\n            elif in_circle1 and in_circle3:\n                # 僅在圓1和圓3內\n                ctx.fillStyle = color_13\n            elif in_circle2 and in_circle3:\n                # 僅在圓2和圓3內\n                ctx.fillStyle = color_23\n            elif in_circle1:\n                # 僅在圓1內\n                ctx.fillStyle = color1\n            elif in_circle2:\n                # 僅在圓2內\n                ctx.fillStyle = color2\n            elif in_circle3:\n                # 僅在圓3內\n                ctx.fillStyle = color3\n            else:\n                # 不屬於任何圓，屬於背景\n                ctx.fillStyle = color_background\n\n            # 填充當前像素\n            ctx.fillRect(px, py, 1, 1)\n\n# 設定三個圓的圓心和半徑\nx1, y1, r1 = 150, 300, 80  # 圓1：圓心 (150, 300)，半徑 80\nx2, y2, r2 = 250, 300, 80  # 圓2：圓心 (250, 300)，半徑 80\nx3, y3, r3 = 200, 200, 80  # 圓3：圓心 (200, 200)，半徑 80（正上方）\n\n# 繪製三個圓形和不同區域\ndraw_three_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)\n \n \n \n', 'tags': '', 'url': 'w14_hw.html'}, {'title': 'w15', 'text': '第一題 \n 從 1 累加到 100 \n total = 0\nfor i in range(1, 101):\n    total += i\n\nprint(f"1 到 100 的總和是：{total}")\n \n \n 第二題 \n 設計一個函式 addto(1, 100), 可以完成上述的累加結果 \n def addto(start, end):\n    """\n    計算從 start 到 end 的累加總和\n    """\n    return sum(range(start, end + 1))  # 使用 sum 和 range 計算總和\n\n# 測試函式\nresult = addto(1, 100)  # 計算 1 到 100 的總和\nprint(f"addto(1, 100) 的結果是：{result}") \n \n 第三題 \n 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果 \n def add_only_even(start, end):\n    """\n    計算從 start 到 end 的偶數總和\n    """\n    return sum(i for i in range(start, end + 1) if i % 2 == 0)\n\n# 測試函式\nresult = add_only_even(1, 100)  # 計算 1 到 100 的偶數總和\nprint(f"add_only_even(1, 100) 的結果是：{result}") \n \n 第四題 \n 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數 \n def add_avoid_8(start, end):\n    """\n    計算從 start 到 end 的偶數總和，避開包含數字 \'8\' 的整數。\n    """\n    total = 0\n    for i in range(start, end + 1):\n        # 檢查是否為偶數並且不包含 \'8\'\n        if i % 2 == 0 and \'8\' not in str(i):\n            total += i\n    return total\n\n# 測試函式\nresult = add_avoid_8(1, 100)  # 計算 1 到 100 的偶數總和，避開包含 \'8\' 的偶數\nprint(f"add_avoid_8(1, 100) 的結果是：{result}") \n \n 心得:書寫四題過後，我發現不同的方法也可以做得出相同的答案，這讓我發覺不用強求一定的過程，條條大路通羅馬，這也適用於未來讀書，可以用不同的方法找出答案，不要太鑽牛角尖。 \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '\n 每六人為一組進行協同程式練習   \n 透過 Jupyterlab 協同網頁 , 輪流指定各組編寫 HW 2 相關的程式練習 , 以及網頁內容  (localhost 與 Codespaces 環境 )編輯 .   \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '\n \n 圖片 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 取得 canvas 的繪圖上下文\nctx = canvas.getContext("2d")\n\n# 畫出 X 軸\nctx.beginPath()\nctx.strokeStyle = \'black\'\nctx.lineWidth = 2\nctx.moveTo(31, 47)  # 原點\nctx.lineTo(400, 47)  # 向右延伸\nctx.stroke()\n\n# 畫出 Y 軸\nctx.beginPath()\nctx.moveTo(31, 47)  # 原點\nctx.lineTo(31, 400)  # 向下延伸\nctx.stroke()\n\n# 標示原點座標\nctx.font = "12px Arial"\nctx.fillStyle = "black"\nctx.fillText("(31, 47)", 35, 40)\n\n# 位移偏移量，將原點 (31, 47) 作為新的繪圖基準\noffset_x = 31\noffset_y = 47\n\n# 畫橙色六邊形\nctx.beginPath()\nctx.fillStyle = "#F47920"\nctx.moveTo(offset_x + 40, offset_y + 63)\nctx.lineTo(offset_x + 60, offset_y + 33)\nctx.lineTo(offset_x + 90, offset_y + 33)\nctx.lineTo(offset_x + 110, offset_y + 63)\nctx.lineTo(offset_x + 90, offset_y + 93)\nctx.lineTo(offset_x + 60, offset_y + 93)\nctx.closePath()\nctx.fill()\n\n# 畫綠色菱形\nctx.beginPath()\nctx.fillStyle = "#009F95"\nctx.moveTo(offset_x + 130, offset_y + 63)\nctx.lineTo(offset_x + 150, offset_y + 33)\nctx.lineTo(offset_x + 170, offset_y + 63)\nctx.lineTo(offset_x + 150, offset_y + 93)\nctx.closePath()\nctx.fill()\n\n# 藍色三角形 (頂點在菱形右側，方向朝下)\nctx.beginPath()\nctx.fillStyle = "#40B4CB"\nctx.moveTo(offset_x + 174, offset_y + 63)  # 頂點在菱形右側\nctx.lineTo(offset_x + 154, offset_y + 93)  # 左下角\nctx.lineTo(offset_x + 194, offset_y + 93)  # 右下角\nctx.closePath()\nctx.fill()\n\n# 畫粉紅色圓形\nctx.beginPath()\nctx.fillStyle = "#EB008B"\nctx.arc(offset_x + 220, offset_y + 63, 20, 0, 2 * 3.14159)\nctx.fill()\n\n# 畫黃色正方形\nctx.beginPath()\nctx.fillStyle = "#FDD56A"\nctx.rect(offset_x + 260, offset_y + 43, 40, 40)\nctx.fill()\n\n# 畫藍色矩形\nctx.beginPath()\nctx.fillStyle = "#003A70"\nctx.rect(offset_x + 320, offset_y + 53, 60, 20)\nctx.fill() \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': '\n 圖片 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=300, height=300)  # 設定迷宮畫布大小\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 取得 canvas 的繪圖上下文\nctx = canvas.getContext("2d")\n\n# 標示左上方點座標 (31, 47)\nctx.font = "12px Arial"\nctx.fillStyle = "red"\nctx.fillText("(31, 47)", 35, 40)\n\n# 定義藍色線條的屬性\nctx.strokeStyle = "blue"\nctx.lineWidth = 2\n\n# 開始繪製迷宮 (座標偏移以 (31, 47) 為起點)\noffset_x = 31\noffset_y = 47\n\n# 繪製迷宮線條\nctx.beginPath()\nctx.moveTo(offset_x + 0, offset_y + 0) \nctx.lineTo(offset_x + 86, offset_y + 0)\nctx.moveTo(offset_x + 0, offset_y + 0)\nctx.lineTo(offset_x + 0, offset_y + 200)\nctx.moveTo(offset_x + 120, offset_y + 0)\nctx.lineTo(offset_x + 200, offset_y + 0)\nctx.moveTo(offset_x + 200, offset_y + 0)\nctx.lineTo(offset_x + 200, offset_y + 200)\nctx.lineTo(offset_x + 120, offset_y + 200)\nctx.moveTo(offset_x + 200, offset_y + 200)\nctx.moveTo(offset_x + 0, offset_y + 200) \nctx.lineTo(offset_x + 86, offset_y + 200)\nctx.moveTo(offset_x + 86, offset_y + 157) \nctx.lineTo(offset_x + 86, offset_y + 200)\nctx.moveTo(offset_x + 86, offset_y + 157) \nctx.lineTo(offset_x + 126, offset_y + 157)\nctx.moveTo(offset_x + 160, offset_y + 120) \nctx.lineTo(offset_x + 160, offset_y + 200)\nctx.moveTo(offset_x + 160, offset_y + 120) \nctx.lineTo(offset_x + 50, offset_y + 120)\nctx.moveTo(offset_x + 50, offset_y + 120) \nctx.lineTo(offset_x + 50, offset_y + 163)\nctx.moveTo(offset_x + 126, offset_y + 80) \nctx.lineTo(offset_x + 126, offset_y + 120)\nctx.moveTo(offset_x + 0, offset_y + 80) \nctx.lineTo(offset_x + 86, offset_y + 80)\nctx.moveTo(offset_x + 86, offset_y + 40) \nctx.lineTo(offset_x + 86, offset_y + 80)\nctx.moveTo(offset_x + 40, offset_y + 40) \nctx.lineTo(offset_x + 160, offset_y + 40)\nctx.moveTo(offset_x + 160, offset_y + 40) \nctx.lineTo(offset_x + 160, offset_y + 83)\nctx.stroke() \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'w16_exam3', 'text': '\n \n 圖片 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=300, height=300)  # 設定迷宮畫布大小\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 取得 canvas 的繪圖上下文\nctx = canvas.getContext("2d")\n\n# 標示左上方點座標 (31, 47)\nctx.font = "12px Arial"\nctx.fillStyle = "red"\nctx.fillText("(31, 47)", 35, 40)\n\n# 定義藍色線條的屬性\nctx.strokeStyle = "black"\nctx.lineWidth = 2\n\n# 開始繪製迷宮 (座標偏移以 (31, 47) 為起點)\noffset_x = 31\noffset_y = 47\n\n# 繪製迷宮線條\nctx.beginPath()\nctx.moveTo(offset_x + 0, offset_y + 0) \nctx.lineTo(offset_x + 86, offset_y + 0)\nctx.moveTo(offset_x + 0, offset_y + 0)\nctx.lineTo(offset_x + 0, offset_y + 200)\nctx.moveTo(offset_x + 120, offset_y + 0)\nctx.lineTo(offset_x + 200, offset_y + 0)\nctx.moveTo(offset_x + 200, offset_y + 0)\nctx.lineTo(offset_x + 200, offset_y + 200)\nctx.lineTo(offset_x + 120, offset_y + 200)\nctx.moveTo(offset_x + 200, offset_y + 200)\nctx.moveTo(offset_x + 0, offset_y + 200) \nctx.lineTo(offset_x + 86, offset_y + 200)\nctx.moveTo(offset_x + 86, offset_y + 157) \nctx.lineTo(offset_x + 86, offset_y + 200)\nctx.moveTo(offset_x + 86, offset_y + 157) \nctx.lineTo(offset_x + 126, offset_y + 157)\nctx.moveTo(offset_x + 160, offset_y + 120) \nctx.lineTo(offset_x + 160, offset_y + 200)\nctx.moveTo(offset_x + 160, offset_y + 120) \nctx.lineTo(offset_x + 50, offset_y + 120)\nctx.moveTo(offset_x + 50, offset_y + 120) \nctx.lineTo(offset_x + 50, offset_y + 163)\nctx.moveTo(offset_x + 126, offset_y + 80) \nctx.lineTo(offset_x + 126, offset_y + 120)\nctx.moveTo(offset_x + 0, offset_y + 80) \nctx.lineTo(offset_x + 86, offset_y + 80)\nctx.moveTo(offset_x + 86, offset_y + 40) \nctx.lineTo(offset_x + 86, offset_y + 80)\nctx.moveTo(offset_x + 40, offset_y + 40) \nctx.lineTo(offset_x + 160, offset_y + 40)\nctx.moveTo(offset_x + 160, offset_y + 40) \nctx.lineTo(offset_x + 160, offset_y + 83)\nctx.stroke()\n\nctx.strokeStyle = "red"\nctx.lineWidth = 2\nctx.beginPath()\nctx.moveTo(offset_x + 100, offset_y + 0) \nctx.lineTo(offset_x + 100, offset_y + 20)\nctx.moveTo(offset_x + 100, offset_y + 20) \nctx.lineTo(offset_x + 175, offset_y + 20)\nctx.moveTo(offset_x + 175, offset_y + 20)\nctx.lineTo(offset_x + 175, offset_y + 100)\nctx.moveTo(offset_x + 175, offset_y + 100)\nctx.lineTo(offset_x + 145, offset_y + 100)\nctx.moveTo(offset_x + 145, offset_y + 100)\nctx.lineTo(offset_x + 145, offset_y + 65)\nctx.moveTo(offset_x + 145, offset_y + 65)\nctx.lineTo(offset_x + 110, offset_y + 65)\nctx.moveTo(offset_x + 110, offset_y + 65)\nctx.lineTo(offset_x + 110, offset_y + 100)\nctx.moveTo(offset_x + 110, offset_y + 100)\nctx.lineTo(offset_x + 25, offset_y + 100)\nctx.moveTo(offset_x + 25, offset_y + 100)\nctx.lineTo(offset_x + 25, offset_y + 180)\nctx.moveTo(offset_x + 25, offset_y + 180)\nctx.lineTo(offset_x + 70, offset_y + 180)\nctx.moveTo(offset_x + 70, offset_y + 180)\nctx.lineTo(offset_x + 70, offset_y + 145)\nctx.moveTo(offset_x + 70, offset_y + 145)\nctx.lineTo(offset_x + 145, offset_y + 145)\nctx.moveTo(offset_x + 145, offset_y + 145)\nctx.lineTo(offset_x + 145, offset_y + 180)\nctx.moveTo(offset_x + 145, offset_y + 180)\nctx.lineTo(offset_x + 100, offset_y + 180)\nctx.moveTo(offset_x + 100, offset_y + 180)\nctx.lineTo(offset_x + 100, offset_y + 200)\nctx.moveTo(offset_x + 100, offset_y + 200)\nctx.stroke() \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末專題報告 \n 期末口頭專題報告影片: \n \n 期末書面專題報告檔案 (pdf): \n /downloads/計算機書面報告.pdf \n 電腦輔助設計與實習課程總結心得: \n 很高興在最後能夠打出一些簡易的程式了，令人雀躍 \n 期末報告自評成績: \n 70 \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython-2', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython-2.html'}]};